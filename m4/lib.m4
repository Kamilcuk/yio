m4_divert(-1)
m4_include(lib/changequote_to_tilde.m4)
m4_changecom(`/*~, `*/~)

m4_include(yio_config.m4)

m4_include(lib/define_blind.m4)
m4_include(lib/define_name.m4)
m4_include(lib/forloop.m4)
m4_include(lib/forloopdash.m4)
m4_include(lib/seq.m4)
m4_include(lib/foreach.m4)
m4_include(lib/foreachq.m4)
m4_include(lib/capitalize2.m4)

/**
 * @dnl
 * I do define dnl just for shortcuts, but please do not use it
 */
m4_define(`dnl~, `m4_dnl~)

/**
 * @def m4_filename
 * @return The filename from __file__
 */
m4_define(`m4_filename~, `m4_patsubst(m4___file__, `^.*\(/\|\\\)~)~)

/**
 * @def m4_resultname
 * @return The filename with m4 suffix.
 */
m4_define(`m4_resultname~, `m4_patsubst(m4_filename, `\.m4$~)~)

/**
 * @def m4_lib_header()
 * This library header to be included as the first line of a file.
 */
m4_define(`m4_lib_header~, `// DO NOT EDIT THIS FILE!!!
// This file was autogenerated by m4___program__ 
// From m4___file__
// Edit the m4 source file to edit this file.
#if 0
#include "m4___file__"
#endif
m4_ifdef(`m4_lib_header_suffix~, `m4_lib_header_suffix~)
#line m4___line__ "m4___file__"
 ~)

/**
 * @def m4_fatal_error(...)
 * @param ... List of any arguments
 * @brief Just print an error and exits m4 with an error.
 */
m4_define(`m4_fatal_error~, `m4_errprint(__file__:__line__`: error: $*
~)m4exit(`1~)~)

m4_define(`m4_forloopXcomma~, `m4_forloopX(`$1~, `$2~, `$3~, `,~)~)dnl~;
m4_define(`m4_forloopYcomma~, `m4_forloopY(`$1~, `$2~, `$3~, `,~)~)dnl~;
m4_define(`m4_forargs~, `m4_forloopXcomma(`$1~, `$2~, ``_~X~)~)dnl~;
m4_define(`m4_fornumbers~, `m4_forloopXcomma(`$1~, `$2~, `X~)~)dnl~;
m4_define(`m4_check_args_count~, `ifelse(eval(`($2) != ($3)~), `1~,
	`m4_fatal_error(`Wrong number of arguments passed to $1: $4~)~)~)

/**
 * @def m4_config(TYPE)
 * @param token Type of configuration to load.
 * @brief Loads configuration from proper config_*.m4 file.
 */
m4_define(`m4_config~,`_m4_config_in(m4_ifelse($1,,`yio~,$1))~)
m4_define(`_m4_config_in~,`m4_ifdef(
		`YTYPE~,
		`~,
		`// Loading cfg_$1.m4
m4_include(`cfg_$1.m4~)
m4_lib_header($1) 
m4_dnl ~)~)~)

m4_divert(0)m4_dnl
