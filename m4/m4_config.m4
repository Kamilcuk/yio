/**
 * @file
 * @ingroup m4
 * m4 configuration used by yio project.
 * Some common functions for templating instantation.
 */

/**
 * @ingroup m4
 * @return The filename with m4 suffix.
 */
#define m4_resultname(...)
m4_define(`m4_resultname~, `m4_patsubst(m4_filename, `\.m4$~)~)m4_dnl;

/**
 * @ingroup m4
 * This library header to be included as the first line of a file.
 */
#define m4_config_generic(...)
m4_define(`m4_config_generic~, `m4_dnl;
// DO NOT EDIT THIS FILE!!!
// This file was auto-generated by m4
// From m4___file__
// Edit the m4 source file to edit this file.
#if 0
#include "m4___file__"
#endif
m4_dnl Add m4_lib_header_suffix if it is defined and nonempty.
m4_ifdef(`m4_lib_header_suffix~, `m4_ifelse(m4_lib_header_suffix, `~, `~, `m4_lib_header_suffix
~)~)m4_dnl
#line m4_eval(m4___line__ + 2) "m4___file__"
m4_dnl ~)m4_dnl;

/**
 * @ingroup m4
 * @param token Type of configuration to load.
 * @brief Loads configuration from proper config_*.m4 file.
 */
#define m4_config(config_name)
m4_define_function(`m4_config~, `m4_ifdef(
		`_m4_config_loaded~,
		`m4_dnl
// m4_config: Config already loaded
~,
		`m4_ifelse(
				`$1~,
				`~,
				`m4_dnl
// m4_config: No config loaded
~,
				`m4_dnl
// m4_config: Loading config_$1.m4
m4_define(`_m4_config_loaded~, `1~)m4_dnl;
m4_include(`config_$1.m4~)m4_dnl
~)m4_dnl
m4_config_generic()m4_dnl~)m4_dnl
m4_dnl~)m4_dnl;

/**
 * Configures the file to use normal strings configuration.
 */
#define m4_config_yio()
m4_define_function(`m4_config_yio~, `m4_config(`yio~)~)m4_dnl;

/**
 * Configures the file to use wide strings configuration.
 */
#define m4_config_ywio()
m4_define_function(`m4_config_ywio~, `m4_config(`ywio~)~)m4_dnl;

/**
 * Configures the file to use utf-8 strings configuration.
 */
#define m4_config_yuio()
m4_define_function(`m4_config_yuio~, `m4_config(`yuio~)~)m4_dnl;

/**
 * Sources the template from template directory.
 * Template directory is in m4_SRCDIR/yio/template/
 */
#define m4_config_using_template(file)

m4_define_function(`_m4_config_using_template_qoute~,
		```$*~~~)

m4_define_function(`m4_config_using_template~,
		`_m4_config_using_template_in(
				m4_SRCDIR()`/yio/template/~m4_ifelse(
						`$1~,
						`~,
						`m4_patsubst(
								m4___file__,
								`\(^\|.*/\)yio/y[^/]*io/~)~,
						`$1~))~)

m4_define_function(`_m4_config_using_template_in~, `m4_dnl
m4_dnl  Check if all variables that we need are defined.
m4_foreach(`X~, `(SRCDIR, OMEGA, PI)~, `m4_ifdef(`m4_~X, `~, `m4_fatal_error(`m4_~~X`` is empty~)~)~)m4_dnl;
m4_dnl
m4_dnl  The letter Ω is in UTF-8: 0xCE 0xA9
m4_dnl  The letter π is in UTF-8: 0xCF 0x80
m4_dnl  These are pretty safe bytes. Below they are used and substituted
m4_dnl  The expansion of esyscmd is inside (...) so that commas do not remove spaces.
m4_dnl  The first patsubst removes the extra leaind and trailing braces.
m4_dnl  The other two replace omega and pi characters by values defined in config_y*io.m4
// `m4_config_using_template~: Using $1
#if 0
#include "$1"
#endif
#line 1 "$1"
m4_ifelse(`$1~, `~, `m4_fatal_error(`First argument is empty~)~)m4_dnl
m4_pushdef(`_m4_config_using_template_content~, `m4_esysexec(cat, `$1~)~)m4_dnl
m4_ifelse(_m4_config_using_template_content, `~, `m4_fatal_error(`Getting $1 failed~)~)m4_dnl
m4_patsubst(
		m4_patsubst(
				m4_patsubst(
						_m4_config_using_template_qoute((_m4_config_using_template_content)),
						`Ω~,
						m4_OMEGA),
				`π~,
				m4_PI),
		`^(\|)$~)m4_dnl
m4_popdef(`_m4_config_using_template_content~)
m4_dnl~)m4_dnl;





