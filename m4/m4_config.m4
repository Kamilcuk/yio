/**
 * @file
 * @ingroup m4
 * m4 configuration used by yio project.
 * Some common functions for templating instantation.
 */

`/**
 * @ingroup m4
 * @return The filename with m4 suffix.
 */
#define m4_resultname(...) ~
m4_define(`m4_resultname~, `m4_patsubst(m4_filename, `\.m4$~)~)m4_dnl;

/**
 * @ingroup m4
 *
 */
#define m4_config_sourcefile()
m4_define(`m4_config_sourcefile~, `m4_patsubst(m4___file__, `^~m4_SRCDIR, `yio/src~)~)m4_dnl;

`/**
 * @ingroup m4
 * This library header to be included as the first line of a file.
 * Adds YHEADERS variable, if it is defined and nonempty.
 */
#define m4_config_generic(...) ~
m4_define(`m4_config_generic~, `m4_dnl;
// DO NOT EDIT THIS FILE!!!
// This file was auto-generated by m4
// From m4___file__
// Edit the m4 source file to edit this file.
#if 0
#include "m4___file__"
#endif
m4_ifdef(`YHEADERS~, `m4_ifelse(YHEADERS, `~, `~, `YHEADERS
~)~)m4_dnl
#line m4_eval(m4___line__ + 2) "m4___file__"
m4_dnl ~)m4_dnl;

`/**
 * @ingroup m4
 * @param token Type of configuration to load.
 * @brief Loads configuration from proper config_*.m4 file.
 */
#define m4_config(config_name) ~
m4_define_function(`m4_config~, `m4_ifdef(
		`_m4_config_loaded~,
		`m4_dnl
// m4_config: Config already loaded
~,
		`m4_ifelse(
				`$1~,
				`~,
				`m4_dnl
// m4_config: No config loaded
~,
				`m4_dnl
// m4_config: Loading config_$1.m4
m4_define(`_m4_config_loaded~, `1~)m4_dnl;
m4_include(`config_$1.m4~)m4_dnl
~)m4_dnl
m4_config_generic()m4_dnl~)m4_dnl
m4_dnl~)m4_dnl;

`/**
 * @ingroup m4
 * Configures the file to use normal strings configuration.
 */
#define m4_config_yio() ~
m4_define_function(`m4_config_yio~, `m4_config(`yio~)~)m4_dnl;

`/**
 * @ingroup m4
 * Configures the file to use wide strings configuration.
 */
#define m4_config_ywio() ~
m4_define_function(`m4_config_ywio~, `m4_config(`ywio~)~)m4_dnl;

`/**
 * @ingroup m4
 * Configures the file to use utf-8 strings configuration.
 */
#define m4_config_yuio() ~
m4_define_function(`m4_config_yuio~, `m4_config(`yuio~)~)m4_dnl;

`/**
 * @ingroup m4
 * @param source The actual source that will be templated.
 * Sources the template from template directory.
 * Template directory is in m4_SRCDIR/yio/yio/
 * The letter Ω is in UTF-8: 0xCE 0xA9
 * The letter π is in UTF-8: 0xCF 0x80
 * These are pretty safe bytes. Below they are used and substituted.
 *
 * Use that way:
 *
 *    m4_config_template(`m4_dnl);
 *
 *    int Ωsome_function(void) {
 *       int someπvar = 1;
 *       return someπvar;
 *    }
 *
 *    ~)m4_dnl;
 *
 * Using @b ; on the end of lines will make eclipse properly detect syntax.
 *
 * The macro uses global variables
 */
#define m4_config_template(source) ~
m4_define_function(`m4_config_template~, `m4_dnl;
m4_ifdef(`YOMEGA~, `~, `m4_fatal_error(`YOMEGA is not defined~)~)m4_dnl;
m4_ifdef(`YPI~,    `~, `m4_fatal_error(`YPI is not defined~)~)m4_dnl;
m4_patsubst(`m4_patsubst(`$1~, `Ω~, YOMEGA)~, `π~, YPI)~)m4_dnl;

`/**
 * @ingroup m4
 * @param source_file The source file related in src/yio/yio/ directory.
 * Includes the file in src/yio/yio/<the source_file>.
 * Then m4_template will be substituted according to YOMEGA and YPI
 * global variables, that should be defined in configuration file.
 */
#define m4_using_template(source_file) ~
m4_define_function(`m4_using_template~, `m4_dnl;
m4_ifdef(`m4_SRCDIR~, `~, `m4_fatal_error(`m4_SRCDIR is not defined~)~)m4_dnl;
m4_include(m4_SRCDIR`/yio/yio/$1~)~)m4_dnl;

`/**
 * @ingroup m4
 * Combines @c m4_config_yio and @c m4_config_template.
 */
#define m4_config_yio_template() ~
m4_define_function(`m4_config_yio_template~,
`m4_config_yio()
m4_config_template(`$1~)~)
