# cmake

# somehow cmake complains that this file is generated from cmake
# and cmake doesn't know from where.
# well, silence it
add_custom_command(
	OUTPUT ${GENDIR}/m4/floatlist.m4
	COMMAND ${CMAKE_COMMAND} -E true
)

# do not regenerate it all on the next run
if(YIO_GENERATED)
	return()
endif()
set(YIO_GENERATED 1 CACHE BOOL "")

# cmake
include(CheckTypeSize)
include(CheckIncludeFile)
include(CheckSymbolExists)
include(CMakePushCheckState)
include(foreach_count_items)
include(check_type_size_bool)
include(check_symbol_exists_bool)

cmake_push_check_state(RESET)

set(CMAKE_REQUIRED_DEFINITIONS 
	-D__STDC_WANT_DEC_FP__=1
	-D__STDC_WANT_IEC_60559_BFP_EXT__=1
	-D__STDC_WANT_IEC_60559_FUNCS_EXT__=1
	-D__STDC_WANT_IEC_60559_TYPES_EXT__=1
)

check_include_file("unistd.h" _yIO_HAVE_UNISTD_H)
check_include_file("float.h"  _yIO_HAVE_FLOAT_H)
check_type_size_bool(__int128 _yIO_HAVE_INT128 BUILTIN_TYPES_ONLY LANGUAGE C)
check_type_size_bool(int64_t  _yIO_HAVE_INT64  LANGUAGE C)

set(floats
	# Please punish them for naming `strfromd` and `strtold` with different suffix
	# Please punish them for `strfromf` having d
	"float"         "float"         "FLT"      "strfromf"      "strtof"        "f"
	"double"        "double"        "DBL"      "strfromd"      "strtod"        ""
	"long double"   "ldouble"       "LDBL"     "strfroml"      "strtol"        "l"
	"_Float16"      "_Float16"      "FLT16"    "strfromf16"    "strtof16"      "f16"
	"_Float32"      "_Float32"      "FLT32"    "strfromf32"    "strtof32"      "f32"
	"_Float64"      "_Float64"      "FLT64"    "strfromf64"    "strtof64"      "f64"
	"_Float128"     "_Float128"     "FLT128"   "strfromf128"   "strtof128"     "f128"
	"_Float32x"     "_Float32x"     "FLT32X"   "strfromf32x"   "strtof32x"     "f32x"
	"_Float64x"     "_Float64x"     "FLT64X"   "strfromf64x"   "strtof64x"     "f64x"
	"_Float128x"    "_Float128x"    "FLT128X"  "strfromf128x"  "strtof128x"    "f128x"
	"_Decimal32"    "_Decimal32"    "DEC32"    "strfromd32"    "strtod32"      "d32"
	"_Decimal64"    "_Decimal64"    "DEC64"    "strfromd64"    "strtod64"      "d64"
	"_Decimal128"   "_Decimal128"   "DEC128"   "strfromd128"   "strtod128"     "d128"
	"_Decimal32x"   "_Decimal32x"   "DEC32X"   "strfromd32x"   "strtod32x"     "d32x"
	"_Decimal64x"   "_Decimal64x"   "DEC64X"   "strfromd64x"   "strtod64x"     "d64x"
	"_Decimal128x"  "_Decimal128x"  "DEC128X"  "strfromd128x"  "strtod128x"    "d128x"
)
set(havefloats)

set(foreachstatevar)
foreach(i IN LISTS floats)
	foreach_count_items(i foreachstatevar type name suffix strfromx strtox funcsuffix)
	if(i)
		continue()
	endif()
	
	log("Checking: ${type} ${name} ${suffix} ${strfromx} ${strtox}")
	
	check_type_size_bool(${type} _yIO_HAVE_${suffix} BUILTIN_TYPES_ONLY LANGUAGE C)
	if(_yIO_HAVE_${suffix})
		check_symbol_exists_bool(${strfromx} "stdlib.h" _yIO_HAVE_${strfromx})
		check_symbol_exists_bool(${strtox} "stdlib.h" _yIO_HAVE_${strtox})
		list(APPEND havefloats ${type} ${name} ${suffix} ${strfromx} ${strtox})
	else()
		set(_yIO_HAVE_${strfromx} 0 CACHE BOOL "" FORCE)
		set(_yIO_HAVE_${strtox}   0 CACHE BOOL "" FORCE)
	endif()
	
endforeach()

# generate yio_config_gen.h #####################################################

file(WRITE ${GENDIR}/yio/yio_config_gen.h "
// This file was autogenerated by cmake script:
// ${CMAKE_CURRENT_LIST_FILE}

")

set(foreachstatevar)
foreach(i IN LISTS havefloats)
	foreach_count_items(i foreachstatevar type name suffix strfromx strtox)
	if(i)
		continue()
	endif()
	log("Generating yio/yio_config_gen.h: ${type} ${name} ${suffix} ${strfromx} ${strtox}")
		
	foreach(j IN ITEMS ${suffix} ${strfromx} ${strtox})
		if(_yIO_HAVE_${j})
			file(APPEND ${GENDIR}/yio/yio_config_gen.h "#define _yIO_HAVE_${j}\n")
		endif()
	endforeach()
endforeach()

# generate m4/floatlist.m4 #########################################################

file(WRITE ${GENDIR}/m4/floatlist.m4 "m4_divert(-1)
/**
 * This file was autogenerated by cmake script:
 * ${CMAKE_CURRENT_LIST_FILE}
 * REMEMBER!
 * type, name, suffix, strfromx, strtox
 */
m4_define(`m4_floatlist~, `(")

set(first 1)
set(foreachstatevar)
foreach(i IN LISTS havefloats)
	foreach_count_items(i foreachstatevar type name suffix strfromx strtox)
	if(i)
		continue()
	endif()
	log("Generating m4/floatlist.m4: ${type} ${name} ${suffix} ${strfromx} ${strtox}")
	
	if(NOT first)
		file(APPEND ${GENDIR}/m4/floatlist.m4 ",")
	endif()
	set(first 0)
	 
	file(APPEND ${GENDIR}/m4/floatlist.m4 
		"(`${type}~,`${name}~,`${suffix}~,`${strfromx}~,`${strtox}~)")

endforeach()

file(APPEND ${GENDIR}/m4/floatlist.m4 ")~)
m4_divert(0)m4_dnl
")

