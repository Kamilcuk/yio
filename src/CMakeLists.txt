# src/CMakeLists.txt
cmake_minimum_required(VERSION 3.12)

if(NOT "${PROJECT_NAME}" STREQUAL "yio")
	message(FATAL_ERROR "DO NOT INCLUDE THIS FILE BY ITS OWN: PROJECT_NAME=${PROJECT_NAME}")
endif()

include(CMakeDependentOption)
include(CheckIncludeFile)
include(k/m4)
include(k/list_filter)
include(k/var_to_0_or_1)
include(${CMAKE_CURRENT_LIST_DIR}/yio_config_gen.cmake)

function(log)
	get_filename_component(_log_list_filename ${CMAKE_CURRENT_LIST_FILE} NAME)
	message(STATUS "yio: ${_log_list_filename}: ${ARGN}")
endfunction()

###########################################################################################
# Stub

if(YIO_DEV)
  file(GLOB_RECURSE tmp *.c *.h)
  yio_cdt_parser(src_cdt_parser ${tmp})
endif()

###########################################################################################
# init

# sanity check
foreach(ii IN ITEMS SRCDIR GENDIR CMAKE_BUILD_TYPE_UPPER)
	if(NOT DEFINED "${ii}")
		message(FATAL_ERROR "${ii} is not defined, but should be in parent cmake script")
	endif()
endforeach()

# List of generated files by m4
set(_gensrcs)

# CPack
include(cpack.cmake)
# Pre checks
# unistd is used in configuration and environmental checks
yio_config_gen_check_include_file("unistd.h" _yIO_HAS_UNISTD_H)
# User configuration
include(configuration.cmake)
# Environment checks
include(environment_checks.cmake)
# Generated by environment_checks.cmake
list(APPEND _gensrcs yio/yio_config_gen.h)

# Generate version.h
include(version.cmake)
configure_file(${SRCDIR}/yio/yio_version.h.in ${GENDIR}/yio/yio_version.h)
list(APPEND _gensrcs yio/yio_version.h)

###########################################################################################

file(GLOB_RECURSE _srcs *.c *.h)
foreach(source IN LISTS _srcs)
	file(RELATIVE_PATH _output ${SRCDIR} ${source})
	if(source MATCHES "yio/template/.*")
		foreach(mode IN ITEMS yio ywio yuio yc16io)
			string(REGEX REPLACE "template" "${mode}" "_tmp" "${_output}")
      list(APPEND _gensrcs ${_tmp})
			list(APPEND _${mode}_gensrcs "${_tmp}")
		endforeach()
	else()
		list(APPEND _gensrcs ${_output})
	endif()
endforeach()
list(SORT _gensrcs)

# Maintainance of GENDIR

# All files in _gensrcs are relative
function(gen_is_relative list)
	if(NOT DEFINED "${list}")
		message(FATAL_ERROR "")
	endif()
	foreach(ii IN LISTS "${list}")
		if(IS_ABSOLUTE "${ii}")
			message(FATAL_ERROR "${ii} is absolute - should be relative to GENDIR")
		endif()
	endforeach()
endfunction()
gen_is_relative(_gensrcs)

# Remove files in GENDIR not in _gensrcs
function(gen_list_exclude result listin listexclude)
	set(tmp)
	foreach(ii IN LISTS ${listin})
		list(FIND "${listexclude}" "${ii}" index)
		if (${index} EQUAL -1)
			list(APPEND tmp "${ii}")
		endif()
	endforeach()
	set(${result} "${tmp}" PARENT_SCOPE)
endfunction()
file(GLOB_RECURSE files RELATIVE ${GENDIR} ${GENDIR}/*.c ${GENDIR}/*.h ${GENDIR}/*.m4)
gen_list_exclude(files_not_in_gensrcs files _gensrcs)
if(files_not_in_gensrcs)
	foreach(ii IN LISTS files_not_in_gensrcs)
		message(STATUS "yio: Removing: ${GENDIR}/${ii}")
		file(REMOVE "${GENDIR}/${ii}")
	endforeach()
endif()

# Sources are relative to gendir, so make them absolute
set(_genabssrcs)
foreach(ii IN LISTS _gensrcs)
	list(APPEND _genabssrcs "${GENDIR}/${ii}")
endforeach()

find_package(Python3 COMPONENTS Interpreter REQUIRED)
add_custom_command(
	COMMENT "Preprocess the sources"
	COMMAND
		${Python3_EXECUTABLE}
    ${CMAKE_CURRENT_SOURCE_DIR}/preprocess.py
		-I "${SRCDIR}"
		-O "${GENDIR}"
		-D "j_MLVLS=${YIO_M4_MLVLS}"
		-D "j_SLOTS_END=${YIO_M4_SLOTS_END}"
		-C "${CMAKE_CURRENT_BINARY_DIR}/jinjacache"
    --debug
	DEPENDS
		${CMAKE_CURRENT_SOURCE_DIR}/preprocess.py
		${CMAKE_CURRENT_SOURCE_DIR}/library.jinja
		${_srcs}
	OUTPUT
		${_genabssrcs}
)

set(_YIO_GEN_FILE ${CMAKE_CURRENT_BINARY_DIR}/yio_generated.stamp CACHE INTERNAL "")
add_custom_command(
	OUTPUT ${_YIO_GEN_FILE}
	COMMAND ${CMAKE_COMMAND} -E touch ${_YIO_GEN_FILE}
	DEPENDS ${_genabssrcs}
	COMMENT "yio: Generated source files (dependency)"
)

# Generate all files target
add_custom_target(yio_gen
	DEPENDS ${_YIO_GEN_FILE}
	COMMENT "yio: Generated source files"
)

################################################################################################
# Installation configuration

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

# The directory where auto-generated installation files are placed
get_filename_component(installgen "${CMAKE_CURRENT_BINARY_DIR}/installgen" ABSOLUTE)
set(_project_config "${installgen}/${PROJECT_NAME}Config.cmake")
if(NOT DEFINED YIO_INSTALL_CMAKEDIR)
	set(YIO_INSTALL_CMAKEDIR "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
		CACHE STRING "Path to YIO Cmake files"
	)
endif()
set(_install_targets)
set(_install_headers)

# yio_install_library(name headers...)
macro(yio_install_library name)
	list(APPEND _install_targets ${name})
	list(APPEND _install_headers ${ARGN})
	set(_install_targets "${_install_targets}" PARENT_SCOPE)
	set(_install_headers "${_install_headers}" PARENT_SCOPE)
endmacro()


function(yio_install_after_targets)
	set(_version_config "${installgen}/${PROJECT_NAME}ConfigVersion.cmake")
	write_basic_package_version_file(
	    "${_version_config}"
	    COMPATIBILITY SameMajorVersion
	)
	# Uses TARGETS_EXPORT_NAME by yioConfig.cmake.in
	configure_package_config_file(
	    "${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in"
	    "${_project_config}"
	    INSTALL_DESTINATION "${YIO_INSTALL_CMAKEDIR}"
	)
	install(
		TARGETS ${_install_targets}
		EXPORT yioTargets
		OPTIONAL
		LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
		ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
		INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
	)
	list(SORT _install_headers)
	list(REMOVE_DUPLICATES _install_headers)
	foreach(hh IN LISTS _install_headers)
		file(RELATIVE_PATH hdir "${GENDIR}" "${hh}")
		if("${hdir}" MATCHES "^\\.\\.")
			message(FATAL_ERROR "Source for ${hh} include file does not come from GENDIR")
		endif()
		get_filename_component(dir "${hdir}" DIRECTORY)
		install(
			FILES "${hh}"
			DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${dir}/"
		)
	endforeach()
	install(
		FILES "${_project_config}" "${_version_config}"
		DESTINATION "${YIO_INSTALL_CMAKEDIR}"
	)
	if(BUILD_SHARED_LIBS)
		set(type shared)
	else()
		set(type static)
	endif()
	install(
		EXPORT yioTargets
		DESTINATION "${YIO_INSTALL_CMAKEDIR}"
		NAMESPACE yio::
		FILE yio-${type}-targets.cmake
	)

endfunction()

################################################################################################
# Compile options

add_custom_target(
	yio_targets
	COMMENT "Build all yio targets"
)
add_dependencies(yio_targets yio_gen)

# @def yio_add_library(name sources)
# Adds the library with the name <name>
# that has the sources <sources>.
# Enables warnings if needed.
# Generates install target for the library.
function(yio_add_library name)
	set(argn ${ARGN})
	list(SORT argn)
	list(REMOVE_DUPLICATES argn)

	# Sources are relative to GENDIR.
	set(srcs)
	foreach(ii IN LISTS argn)
		if(IS_ABSOLUTE "${ii}")
			message(FATAL_ERROR "${ii} is absolute. Should be relative to GENDIR")
		endif()
		set(ii "${GENDIR}/${ii}")
		get_filename_component(ii "${ii}" ABSOLUTE)
		list(APPEND srcs "${ii}")
	endforeach()

	# Add the library.
	add_library(${name} ${srcs})
	set_target_properties(${name} PROPERTIES
		C_EXTENSIONS YES
		C_STANDARD 11
		C_STANDARD_REQUIRED NO
		$<$<NOT:$<CONFIG:DEBUG>>:INTERPROCEDURAL_OPTIMIZATION TRUE>
		DEBUG_POSTFIX "d"
		VERSION "${YIO_PROJECT_VERSION}"
		SOVERSION "${YIO_PROJECT_SOVERSION}"
	)
	target_include_directories(${name} PUBLIC
		$<BUILD_INTERFACE:${GENDIR}>
	)
	target_compile_features(${name} PUBLIC
		c_std_11
		c_function_prototypes
		c_static_assert
		c_variadic_macros
	)
	target_link_libraries(${name} PUBLIC m)
	if(YIO_DEV AND NOT BUILD_SHARED_LIBS)
		check_c_compiler_flag("-ffunction-sections -fdata-sections -Wl,gc-sections" YIO_GC_SECTIONS)
		if(YIO_GC_SECTIONS)
			target_compile_options(${name} PUBLIC -fdata-sections -ffunction-sections)
			target_link_options(${name} PUBLIC -Wl,--gc-sections)
		endif()
	endif()

	add_dependencies(${name} yio_gen)

	add_dependencies(yio_targets ${name})

	# Extract list of headers.
	set(headers "${srcs}")
	list(FILTER headers INCLUDE REGEX "\\.h$")

	yio_install_library(${name} ${headers})
endfunction()

# Just like file(GLOB) but results in files
# with paths relative to SRCDIR.
function(file_glob_srcs_relative_to_srcdir glob var path)
	# cmake-lint: disable=C0114
	file(${glob} tmp ${path}/*.c ${path}/*.h)
	set(tmp2)
	foreach(ii IN LISTS tmp)
		# message("${var} ${i}")
		file(RELATIVE_PATH jj ${SRCDIR} ${ii})
		list(APPEND tmp2 ${jj})
	endforeach()
	set(${var} "${tmp2}" PARENT_SCOPE)
endfunction()

##################################################################################
# Add libraries

file_glob_srcs_relative_to_srcdir(GLOB _auto_compat_srcs yio/compatlib)
yio_add_library(yio_compat
	${_auto_compat_srcs}
	yio/yio_config.h
	yio/yio_version.h
	yio/yio_config_gen.h
)

file_glob_srcs_relative_to_srcdir(GLOB _auto_generic_srcs yio)
file_glob_srcs_relative_to_srcdir(GLOB _auto_yio_private_srcs yio/private)
set(_yio_sources
	yio/yio_version.h
	yio/yio_config.h
	yio/yio_config_gen.h

	${_auto_yio_private_srcs}
	${_auto_generic_srcs}
	yio.h
	${_yio_gensrcs}
	ywio.h
	${_ywio_gensrcs}
)
if(UNISTRING_LIB)
	list(APPEND _yio_sources
		yc16io.h
		${_yc16io_gensrcs}
		yuio.h
		${_yuio_gensrcs}
	)
endif()
yio_add_library(yio ${_yio_sources})
if(UNISTRING_LIB)
	target_link_libraries(yio PUBLIC ${UNISTRING_LIB})
endif()

##################################################################################

yio_install_after_targets()

add_custom_target(
	yio_uninstall
	COMMENT "Uninstalling yio library"
	COMMAND sh -c "xargs rm -f -v < install_manifest.txt"
	WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
	VERBATIM
)
