# src/CMakeLists.txt
cmake_minimum_required(VERSION 3.12)

if(NOT "${PROJECT_NAME}" STREQUAL "yio")
	message(FATAL_ERROR "DO NOT INCLUDE THIS FILE BY ITS OWN: PROJECT_NAME=${PROJECT_NAME}")
endif()

include(CMakeDependentOption)
include(CheckIncludeFile)
include(m4)
include(list_filter)
include(var_to_0_or_1)
include(${CMAKE_CURRENT_LIST_DIR}/yio/template/yio_template.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/yio_config_gen.cmake)

function(log)
	get_filename_component(_log_list_filename ${CMAKE_CURRENT_LIST_FILE} NAME)
	message(STATUS "yio: ${_log_list_filename}: ${ARGN}")
endfunction()

###########################################################################################
# Stub

if (YIO_DEV)
  file(GLOB_RECURSE tmp *.c *.h)
  add_library(_CDT_PARSER EXCLUDE_FROM_ALL ${tmp})
  target_compile_definitions(_CDT_PARSER PRIVATE
    YIO_CDT_PARSER=1
    __CDT_PARSER__=1
    YIO_REALLY_CDT_PARSER=1
  )
  target_include_directories(_CDT_PARSER PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_BINARY_DIR}/gen
  )
  target_link_libraries(_CDT_PARSER PRIVATE library_that_does_not_exists)
endif()

###########################################################################################
# init

# sanity check
foreach(i IN ITEMS SRCDIR GENDIR CMAKE_BUILD_TYPE_UPPER)
	if(NOT DEFINED "${i}")
		message(FATAL_ERROR "${i} is not defined, but should be in parent cmake script")
	endif()
endforeach()

# List of generated files by m4
set(gensrcs)

# CPack
include(cpack.cmake)
# Pre checks
# unistd is used in configuration and environmental checks
yio_config_gen_check_include_file("unistd.h" _yIO_HAS_UNISTD_H)
# User configuration
include(configuration.cmake)
# Environment checks
include(environment_checks.cmake)
# Generated by environment_checks.cmake
list(APPEND gensrcs yio/yio_config_gen.h)

# Generate version.h
include(version.cmake)
configure_file(${SRCDIR}/yio/yio_version.h.in ${GENDIR}/yio/yio_version.h)
list(APPEND gensrcs yio/yio_version.h)

###########################################################################################
# generate config.m4
configure_file(
	${SRCDIR}/m4/yio_config.m4.in
	${CMAKE_CURRENT_BINARY_DIR}/m4gen/yio_config.m4
	@ONLY
)
list(APPEND gennodirsrcs ${CMAKE_CURRENT_BINARY_DIR}/m4gen/yio_config.m4)

# generate error messages ####################
add_custom_command(
	COMMENT "Generate yio/yio_error_messages.h file"
	OUTPUT
		${GENDIR}/yio/yio_error_messages.h
	DEPENDS
		${SRCDIR}/yio/yio_error.h
		${SRCDIR}/yio/yio_error_messages.cmake
	COMMAND ${CMAKE_COMMAND}
		-D OUTPUT=${GENDIR}/yio/yio_error_messages.h
		-D INPUT=${SRCDIR}/yio/yio_error.h
		-P ${CMAKE_CURRENT_SOURCE_DIR}/yio/yio_error_messages.cmake
	VERBATIM
)
list(APPEND gensrcs yio/yio_error_messages.h)

##############################################################################################
# Preprocess files with m4.

file(GLOB_RECURSE m4srcs *.c *.h)
list(FILTER m4srcs EXCLUDE REGEX "src/yio/template/")
list(FILTER m4srcs EXCLUDE REGEX "src/yio/y*io/")
foreach(source IN LISTS m4srcs)
	file(RELATIVE_PATH sourcenice ${SRCDIR} ${source})
	set(output ${GENDIR}/${sourcenice})
	# dbg("m4_add_command ${output} ${source}")
	m4_add_command(
		OUTPUT ${output}
		SOURCE ${source}
	)
	list(APPEND gensrcs ${sourcenice})
endforeach()

include(yio/yio/template.cmake)
list(APPEND gensrcs ${yio_gensrcs})
include(yio/ywio/template.cmake)
list(APPEND gensrcs ${ywio_gensrcs})
include(yio/yc16io/template.cmake)
list(APPEND gensrcs ${yc16io_gensrcs})
include(yio/yuio/template.cmake)
list(APPEND gensrcs ${yuio_gensrcs})

##############################################################################################
# Maintainance of GENDIR

# All files in gensrcs are relative
function(gen_is_relative list)
	if(NOT DEFINED "${list}")
		message(FATAL_ERROR "")
	endif()
	foreach(i IN LISTS "${list}")
		if(IS_ABSOLUTE "${i}")
			message(FATAL_ERROR "${i} is absolute - should be relative to GENDIR")
		endif()
	endforeach()
endfunction()
gen_is_relative(gensrcs)

# Remove files in GENDIR not in gensrcs
function(gen_list_exclude result listin listexclude)
	set(tmp)
	foreach(i IN LISTS ${listin})
		list(FIND "${listexclude}" "${i}" index)
		if (${index} EQUAL -1)
			list(APPEND tmp "${i}")
		endif()
	endforeach()
	set(${result} "${tmp}" PARENT_SCOPE)
endfunction()
file(GLOB_RECURSE files RELATIVE ${GENDIR} ${GENDIR}/*.c ${GENDIR}/*.h ${GENDIR}/*.m4)
gen_list_exclude(files_not_in_gensrcs files gensrcs)
if(files_not_in_gensrcs)
	foreach(i IN LISTS files_not_in_gensrcs)
		message(STATUS "yio: Removing: ${GENDIR}/${i}")
		file(REMOVE "${GENDIR}/${i}")
	endforeach()
endif()

# Sources are relative to gendir, so make them absolute
set(genabssrcs)
foreach(i IN LISTS gensrcs)
	list(APPEND genabssrcs "${GENDIR}/${i}")
endforeach()

set(yio_gen_file ${CMAKE_CURRENT_BINARY_DIR}/yio_generated.stamp CACHE INTERNAL "")
add_custom_command(
	OUTPUT ${yio_gen_file}
	COMMAND ${CMAKE_COMMAND} -E touch ${yio_gen_file}
	DEPENDS ${genabssrcs} ${gennodirsrcs}
	COMMENT "yio: Generated source files (dependency)"
)

# Generate all files target
add_custom_target(yio_gen
	DEPENDS ${yio_gen_file}
	COMMENT "yio: Generated source files"
)

################################################################################################
# Installation configuration

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

# The directory where auto-generated installation files are placed
get_filename_component(installgen "${CMAKE_CURRENT_BINARY_DIR}/installgen" ABSOLUTE)
set(config_install_dir "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
set(project_config "${installgen}/${PROJECT_NAME}Config.cmake")
set(version_config "${installgen}/${PROJECT_NAME}ConfigVersion.cmake")
set(install_targets)
set(install_headers)

# yio_install_library(name headers...)
macro(yio_install_library name)
	list(APPEND install_targets ${name})
	list(APPEND install_headers ${ARGN})
	set(install_targets "${install_targets}" PARENT_SCOPE)
	set(install_headers "${install_headers}" PARENT_SCOPE)
endmacro()


function(yio_install_after_targets)
	write_basic_package_version_file(
	    "${version_config}"
	    COMPATIBILITY SameMajorVersion
	)
	# Uses TARGETS_EXPORT_NAME by yioConfig.cmake.in
	configure_package_config_file(
	    "${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in"
	    "${project_config}"
	    INSTALL_DESTINATION "${config_install_dir}"
	)
	install(
		TARGETS ${install_targets}
		EXPORT yioTargets
		OPTIONAL
		LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
		ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
		INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
	)
	list(SORT install_headers)
	list(REMOVE_DUPLICATES install_headers)
	foreach(h IN LISTS install_headers)
			file(RELATIVE_PATH hdir "${GENDIR}" "${h}")
			if("${hdir}" MATCHES "^\\.\\.")
				message(FATAL_ERROR "Source for ${h} include file does not come from GENDIR")
			endif()
			get_filename_component(dir "${hdir}" DIRECTORY)
			install(
				FILES "${h}"
				DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${dir}/"
			)
	endforeach()
	install(
		FILES "${project_config}" "${version_config}"
		DESTINATION "${config_install_dir}"
	)
	install(
		EXPORT yioTargets
		DESTINATION "${config_install_dir}"
		NAMESPACE yio::
	)
endfunction()

################################################################################################
# Compile options

add_custom_target(yio_targets)
add_dependencies(yio_targets yio_gen)

# @def yio_add_library(name sources)
# Adds the library with the name <name>
# that has the sources <sources>.
# Enables warnings if needed.
# Generates install target for the library.
function(yio_add_library name)
	set(argn ${ARGN})
	list(SORT argn)
	list(REMOVE_DUPLICATES argn)

	# Sources are relative to GENDIR.
	set(srcs)
	foreach(i IN LISTS argn)
		if(IS_ABSOLUTE "${i}")
			message(FATAL_ERROR "${i} is absolute. Should be relative to GENDIR")
		endif()
		set(i "${GENDIR}/${i}")
		get_filename_component(i "${i}" ABSOLUTE)
		list(APPEND srcs "${i}")
	endforeach()

	# Add the library.
	add_library(${name} ${srcs})
	set_property(TARGET ${name} PROPERTY
		C_EXTENSIONS YES
		C_STANDARD 11
		C_STANDARD_REQUIRED NO
		$<$<NOT:$<CONFIG:DEBUG>>:INTERPROCEDURAL_OPTIMIZATION TRUE>
		DEBUG_POSTFIX "d"
	)
	target_include_directories(${name} PUBLIC
		$<BUILD_INTERFACE:${GENDIR}>
	)
	target_compile_features(${name} PUBLIC
		c_std_11
		c_function_prototypes
		c_static_assert
		c_variadic_macros
	)
	target_link_libraries(${name} PUBLIC m)

	add_dependencies(${name} yio_gen)

	if(NOT YIO_DEV)
		# Add dependencies on object files on yio_gen, so that all files
		# are generated before build
		set_source_files_properties(${srcs} PROPERTIES OBJECT_DEPENDS ${yio_gen_file})
	endif()

	add_dependencies(yio_targets ${name})

	# Extract list of headers.
	set(headers "${srcs}")
	list(FILTER headers INCLUDE REGEX "\\.h$")

	yio_install_library(${name} ${headers})
endfunction()

# Just like file(GLOB) but results in files
# with paths relative to SRCDIR.
function(file_glob_relative_to_srcdir glob var)
	file(${glob} tmp ${ARGN})
	set(tmp2)
	foreach(i IN LISTS tmp)
		# message("${var} ${i}")
		file(RELATIVE_PATH j ${SRCDIR} ${i})
		list(APPEND tmp2 ${j})
	endforeach()
	set(${var} "${tmp2}" PARENT_SCOPE)
endfunction()

##################################################################################
# Add libraries

file_glob_relative_to_srcdir(GLOB auto_decimallib_srcs yio/decimallib/*.h yio/decimallib/*.c)
yio_add_library(yio_decimallib
	${auto_decimallib_srcs}
	yio/yio_config.h
	yio/yio_version.h
	yio/yio_config_gen.h
)

file_glob_relative_to_srcdir(GLOB auto_generic_srcs yio/*.h yio/*.c)
file_glob_relative_to_srcdir(GLOB auto_yio_private_srcs yio/private/*.h yio/private/*.c)
yio_add_library(yio
	${auto_yio_private_srcs}
	${auto_generic_srcs}
	yio/yio_config.h
	yio/yio_config_gen.h
	yio/yio_error_messages.h
	yio.h
	${yio_gensrcs}
	ywio.h
	${ywio_gensrcs}
)
if(UNISTRING_LIB)
	# converting from UTF32 and UTF16 to WCHAR and CHAR needs conversion library
	target_link_libraries(yio PUBLIC ${UNISTRING_LIB})
endif()

# UNISTRING_LIB found in parent CMakeLists.txt
if(UNISTRING_LIB)
	yio_add_library(yuio
		yc16io.h
		${yc16io_gensrcs}
		yuio.h
		${yuio_gensrcs}
	)
	target_link_libraries(yuio PUBLIC yio ${UNISTRING_LIB})
endif()

##################################################################################

yio_install_after_targets()

add_custom_target(
	yio_uninstall
	COMMAND sh -c "xargs rm -f -v < install_manifest.txt"
	WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
	VERBATIM
)
