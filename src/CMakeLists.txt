# src/CMakeLists.txt

include(CMakeDependentOption)
include(CheckIncludeFile)
include(k/list_filter)
include(k/var_to_0_or_1)
include(${CMAKE_CURRENT_LIST_DIR}/yio_config_gen.cmake)

###########################################################################################
# Stub

if(YIO_DEV)
  file(GLOB_RECURSE tmp *.c *.h)
  yio_cdt_parser(src_cdt_parser ${tmp})
endif()

###########################################################################################
# init

# sanity check
foreach(ii IN ITEMS SRCDIR GENDIR CMAKE_BUILD_TYPE_UPPER)
	if(NOT DEFINED "${ii}")
		message(FATAL_ERROR "${ii} is not defined, but should be in parent cmake script")
	endif()
endforeach()

# List of generated files
set(_gensrcs)

# CPack
include(cpack.cmake)
# Pre checks
# unistd is used in configuration and environmental checks
yio_config_gen_check_include_file("unistd.h" YYIO_HAS_UNISTD_H)
# User configuration
include(configuration.cmake)
# Environment checks
include(environment_checks.cmake)
# Generated by environment_checks.cmake
list(APPEND _gensrcs yio/yio_config_gen.h)

# Generate version.h
include(version.cmake)
configure_file(${SRCDIR}/yio/yio_version.h.in ${GENDIR}/yio/yio_version.h)
list(APPEND _gensrcs yio/yio_version.h)

###########################################################################################

add_custom_target(yio_gen
	COMMENT "yio sources generated"
)

# Generate errors
file(GLOB_RECURSE csrcs yio/*.c)
add_custom_command(
  OUTPUT
    ${GENDIR}/yio/yio_error_genenum.h
    ${GENDIR}/yio/yio_error_genmsg.h
  COMMAND
    ${Python3_EXECUTABLE}
    -X pycache_prefix=${CMAKE_CURRENT_BINARY_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/geterrors.py
    ${GENDIR}/yio/yio_error_genenum.h
    ${GENDIR}/yio/yio_error_genmsg.h
  COMMENT "Generate errors list from source files"
  DEPENDS
    ${CMAKE_CURRENT_SOURCE_DIR}/geterrors.py
    ${csrcs}
)
list(APPEND _gensrcs
  yio/yio_error_genenum.h
  yio/yio_error_genmsg.h
)
list(APPEND _yio_gensrcs
  yio/yio_error_genenum.h
  yio/yio_error_genmsg.h
)
set_property(TARGET yio_gen APPEND PROPERTY SOURCES
  ${GENDIR}/yio/yio_error_genenum.h
  ${GENDIR}/yio/yio_error_genmsg.h
)

file(GLOB_RECURSE _srcs *.c *.h)
foreach(source IN LISTS _srcs)
	file(RELATIVE_PATH _output ${SRCDIR} ${source})
	if(source MATCHES "yio/yio/.*")
		foreach(mode IN ITEMS yio ywio yuio yc16io)
			string(REGEX REPLACE "yio/yio/" "yio/${mode}/" "_tmp" "${_output}")
			jinja_generate(
				TARGET yio_gen
				SOURCE ${source}
				OUTPUT ${GENDIR}/${_tmp}
				--mode ${mode}
			)
			list(APPEND _gensrcs ${_tmp})
			list(APPEND _${mode}_gensrcs "${_tmp}")
		endforeach()
	else()
		jinja_generate(
			TARGET yio_gen
			SOURCE ${source}
			OUTPUT ${GENDIR}/${_output}
		)
		list(APPEND _gensrcs ${_output})
	endif()
endforeach()
list(SORT _gensrcs)

# Maintainance of GENDIR

# All files in _gensrcs are relative
function(gen_is_relative list)
	if(NOT DEFINED "${list}")
		message(FATAL_ERROR "")
	endif()
	foreach(ii IN LISTS "${list}")
		if(IS_ABSOLUTE "${ii}")
			message(FATAL_ERROR "${ii} is absolute - should be relative to GENDIR")
		endif()
	endforeach()
endfunction()
gen_is_relative(_gensrcs)

# Remove files in GENDIR not in _gensrcs
function(gen_list_exclude result listin listexclude)
	set(tmp)
	foreach(ii IN LISTS ${listin})
		list(FIND "${listexclude}" "${ii}" index)
		if (${index} EQUAL -1)
			list(APPEND tmp "${ii}")
		endif()
	endforeach()
	set(${result} "${tmp}" PARENT_SCOPE)
endfunction()
file(GLOB_RECURSE files RELATIVE ${GENDIR} ${GENDIR}/*.c ${GENDIR}/*.h)
gen_list_exclude(files_not_in_gensrcs files _gensrcs)
foreach(ii IN LISTS files_not_in_gensrcs)
	message(STATUS "yio: Removing: ${GENDIR}/${ii}")
	file(REMOVE "${GENDIR}/${ii}")
endforeach()

################################################################################################
# Installation configuration

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

# The directory where auto-generated installation files are placed
get_filename_component(installgen "${CMAKE_CURRENT_BINARY_DIR}/installgen" ABSOLUTE)
set(_project_config "${installgen}/${PROJECT_NAME}Config.cmake")
if(NOT DEFINED YIO_INSTALL_CMAKEDIR)
	set(YIO_INSTALL_CMAKEDIR "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
		CACHE STRING "Path to YIO Cmake files"
	)
endif()
set(_install_targets)
set(_install_headers)

# yio_install_library(name headers...)
macro(yio_install_library name)
	list(APPEND _install_targets ${name})
	list(APPEND _install_headers ${ARGN})
	set(_install_targets "${_install_targets}" PARENT_SCOPE)
	set(_install_headers "${_install_headers}" PARENT_SCOPE)
endmacro()


function(yio_install_after_targets)
	set(_version_config "${installgen}/${PROJECT_NAME}ConfigVersion.cmake")
	write_basic_package_version_file(
	    "${_version_config}"
	    COMPATIBILITY SameMajorVersion
	)
	# Uses TARGETS_EXPORT_NAME by yioConfig.cmake.in
	configure_package_config_file(
	    "${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in"
	    "${_project_config}"
	    INSTALL_DESTINATION "${YIO_INSTALL_CMAKEDIR}"
	)
	install(
		TARGETS ${_install_targets}
		EXPORT yioTargets
		OPTIONAL
		LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
		ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
		INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
	)
	list(SORT _install_headers)
	list(REMOVE_DUPLICATES _install_headers)
	foreach(hh IN LISTS _install_headers)
		file(RELATIVE_PATH hdir "${GENDIR}" "${hh}")
		if("${hdir}" MATCHES "^\\.\\.")
			message(FATAL_ERROR "Source for ${hh} include file does not come from GENDIR")
		endif()
		get_filename_component(dir "${hdir}" DIRECTORY)
		install(
			FILES "${hh}"
			DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${dir}/"
		)
	endforeach()
	install(
		FILES "${_project_config}" "${_version_config}"
		DESTINATION "${YIO_INSTALL_CMAKEDIR}"
	)
	if(BUILD_SHARED_LIBS)
		set(type shared)
	else()
		set(type static)
	endif()
	install(
		EXPORT yioTargets
		DESTINATION "${YIO_INSTALL_CMAKEDIR}"
		NAMESPACE yio::
		FILE yio-${type}-targets.cmake
	)

endfunction()

################################################################################################
# Compile options

add_custom_target(
	yio_targets
	COMMENT "Build all yio targets"
)

# @def yio_add_library(name sources)
# Adds the library with the name <name>
# that has the sources <sources>.
# Enables warnings if needed.
# Generates install target for the library.
function(yio_add_library name)
	set(argn ${ARGN})
	list(SORT argn)
	list(REMOVE_DUPLICATES argn)

	# Sources are relative to GENDIR.
	set(srcs)
	foreach(ii IN LISTS argn)
		if(IS_ABSOLUTE "${ii}")
			message(FATAL_ERROR "${ii} is absolute. Should be relative to GENDIR")
		endif()
		set(ii "${GENDIR}/${ii}")
		get_filename_component(ii "${ii}" ABSOLUTE)
		list(APPEND srcs "${ii}")
	endforeach()

	# Add the library.
	add_library(${name} ${srcs})
	set_target_properties(${name} PROPERTIES
		C_EXTENSIONS YES
		C_STANDARD 11
		C_STANDARD_REQUIRED NO
		$<$<NOT:$<CONFIG:DEBUG>>:INTERPROCEDURAL_OPTIMIZATION TRUE>
		DEBUG_POSTFIX "d"
		VERSION "${YIO_PROJECT_VERSION}"
		SOVERSION "${YIO_PROJECT_SOVERSION}"
	)
	target_compile_definitions(${name} PRIVATE
		YYIO_PRIVATE=1
	)
	target_include_directories(${name} PUBLIC
		$<BUILD_INTERFACE:${GENDIR}>
	)
	target_compile_features(${name} PUBLIC
		c_std_11
		c_function_prototypes
		c_static_assert
		c_variadic_macros
	)
	target_link_libraries(${name} PUBLIC m)
	if(YIO_DEV AND NOT BUILD_SHARED_LIBS)
		if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
			target_compile_options(${name} PRIVATE -Werror=vla)
		endif()
		check_c_compiler_flag("-ffunction-sections -fdata-sections -Wl,gc-sections" YIO_GC_SECTIONS)
		if(YIO_GC_SECTIONS)
			target_compile_options(${name} PUBLIC -fdata-sections -ffunction-sections)
			target_link_options(${name} PUBLIC -Wl,--gc-sections)
		endif()
	endif()

	add_dependencies(${name} yio_gen)
	add_dependencies(yio_targets ${name})

	# Extract list of headers.
	set(headers "${srcs}")
	list(FILTER headers INCLUDE REGEX "\\.h$")

	yio_install_library(${name} ${headers})
endfunction()

# Just like file(GLOB) but results in files
# with paths relative to SRCDIR.
function(file_glob_srcs_relative_to_srcdir glob var path)
	# cmake-lint: disable=C0114
	file(${glob} tmp ${path}/*.c ${path}/*.h)
	set(tmp2)
	foreach(ii IN LISTS tmp)
		# message("${var} ${i}")
		file(RELATIVE_PATH jj ${SRCDIR} ${ii})
		list(APPEND tmp2 ${jj})
	endforeach()
	set(${var} "${tmp2}" PARENT_SCOPE)
endfunction()

##################################################################################
# Add libraries

file_glob_srcs_relative_to_srcdir(GLOB _auto_generic_srcs yio)
file_glob_srcs_relative_to_srcdir(GLOB _auto_yio_private_srcs yio/private)
set(_yio_sources
	yio/yio_version.h
	yio/yio_config.h
	yio/yio_config_gen.h

	${_auto_yio_private_srcs}
	${_auto_generic_srcs}
	yio.h
	${_yio_gensrcs}
)
if(YIO_HAS_WCHAR_H)
  list(APPEND _yio_sources
    ywio.h
    ${_ywio_gensrcs}
  )
endif()
if(UNISTRING_LIB)
	list(APPEND _yio_sources
		yc16io.h
		${_yc16io_gensrcs}
		yuio.h
		${_yuio_gensrcs}
	)
endif()
yio_add_library(yio ${_yio_sources})
if(UNISTRING_LIB)
	target_link_libraries(yio PUBLIC ${UNISTRING_LIB})
endif()

file_glob_srcs_relative_to_srcdir(GLOB _auto_compat_srcs yio/compatlib)
yio_add_library(yio_compat
	${_auto_compat_srcs}
	yio/yio_config.h
	yio/yio_version.h
	yio/yio_config_gen.h
)
add_dependencies(yio_compat yio)

##################################################################################

yio_install_after_targets()

add_custom_target(
	yio_uninstall
	COMMENT "Uninstalling yio library"
	COMMAND sh -c "xargs rm -f -v < install_manifest.txt"
	WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
	VERBATIM
)

###############################################################################

if(NOT UNIX)
  return()
endif()

set(_lintsrcs ${_gensrcs})
list(FILTER _lintsrcs EXCLUDE REGEX ".*yio_error_gen.*")
list(FILTER _lintsrcs EXCLUDE REGEX ".*/yio/private.h")
list(FILTER _lintsrcs EXCLUDE REGEX ".*/yio_strlib.h")
#list(FILTER _lintsrcs EXCLUDE REGEX ".*\\.h")

function(yio_add_linter A_NAME)
  cmake_parse_arguments(A "" "" "COMMENT;COMMAND;DEPENDS" ${ARGV})
  if(NOT A_COMMENT)
    set(A_COMMENT ${A_COMMAND})
  endif()
  list(GET A_COMMENT 0 A_NAME)
  string(REPLACE ";" " " A_COMMENT "${A_COMMENT}")
  set(deps)
  foreach(ii IN LISTS _lintsrcs)
    add_custom_command(
      OUTPUT
        ${CMAKE_CURRENT_BINARY_DIR}/${A_NAME}/${ii}
      COMMENT
        "${A_COMMENT} ${ii}"
      COMMAND
        ${A_COMMAND} ${GENDIR}/${ii}
      COMMAND ${CMAKE_COMMAND} -E touch
        ${CMAKE_CURRENT_BINARY_DIR}/${A_NAME}/${ii}
      DEPENDS
        ${GENDIR}/${ii}
        #$<TARGET_OBJECTS:yio>
        ${A_DEPENDS}
      WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/..
      VERBATIM
    )
    list(APPEND deps
      ${CMAKE_CURRENT_BINARY_DIR}/${A_NAME}/${ii}
    )
  endforeach()
  add_custom_target(yio_${A_NAME}
    COMMENT "Run ${A_NAME}"
    DEPENDS ${deps}
  )
  add_dependencies(yio_${A_NAME} yio)
endfunction()

yio_add_linter(
  COMMENT
    clang-tidy --quiet -p ${CMAKE_BINARY_DIR} --color
  COMMAND
    bash -c "\"$@\" 2> >(sed '/[0-9]* warnings\\? generated\\.$/d')" _
    clang-tidy --quiet -p ${CMAKE_BINARY_DIR} --color
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/../.clang-tidy
)
yio_add_linter(
  COMMAND cpplint --quiet
  DEPENDS ../CPPLINT.cfg
)

###############################################################################

add_custom_command(
  OUTPUT coverity-misra-standards-ds-ul.pdf
  COMMENT "Download coverity-misra-standards-ds-ul.pdf to generate misra_rules.txt"
  COMMAND
    curl -sS -o coverity-misra-standards-ds-ul.pdf
    https://www.synopsys.com/content/dam/synopsys/sig-assets/datasheets/coverity-misra-standards-ds-ul.pdf
  VERBATIM
)
add_custom_command(
  OUTPUT misra_rules.txt
  COMMENT "Generate misra_rules.txt for cppcheck misra plugin"
  DEPENDS coverity-misra-standards-ds-ul.pdf
  COMMAND pdftotext coverity-misra-standards-ds-ul.pdf misra_rules.txt.tmp
  COMMAND sed -i
		-e "1,/MISRA C:2012 supported rules/d"
		-e "/^Rule 1\.1$/iAppendix A Summary of guidelines"
		-e "/^This datasheet applies to/,$d"
		misra_rules.txt.tmp
  COMMAND sed -zE -i
		-e "s/\\n/ /g"
		-e "s/ * (Rule [0-9.]*)  */\\n\\n\\1\\n\\n/g"
    misra_rules.txt.tmp
  COMMAND ${CMAKE_COMMAND} -E copy_if_different misra_rules.txt.tmp misra_rules.txt
  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
  VERBATIM
)
include(ProcessorCount)
ProcessorCount(NPROC)
math(EXPR NPROC "${NPROC} + 1")
add_custom_command(
  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/cppcheck.cfg
  COMMENT "Generate cppcheck.cfg command line options"
  DEPENDS
    ${CMAKE_CURRENT_SOURCE_DIR}/../cppcheck.cfg
  COMMAND sed "s/[[:space:]]*#.*//; /^[[:space:]]*$/d"
    ${CMAKE_CURRENT_SOURCE_DIR}/../cppcheck.cfg > ${CMAKE_CURRENT_BINARY_DIR}/cppcheck.cfg.1
  COMMAND env -i
    NPROC=${NPROC}
    CMAKE_CURRENT_BINARY_DIR=${CMAKE_CURRENT_BINARY_DIR}
    envsubst
    < ${CMAKE_CURRENT_BINARY_DIR}/cppcheck.cfg.1
    > ${CMAKE_CURRENT_BINARY_DIR}/cppcheck.cfg
  VERBATIM
)
add_custom_command(
  OUTPUT
    ${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json.diff
  COMMENT "Copy if different compile_commands.json"
  DEPENDS
    ${CMAKE_BINARY_DIR}/compile_commands.json
  COMMAND ${CMAKE_COMMAND} -E copy_if_different
    ${CMAKE_BINARY_DIR}/compile_commands.json
    ${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json.diff
)
add_custom_command(
  OUTPUT
    ${CMAKE_CURRENT_BINARY_DIR}/yio_lint_compile_commands.json
  COMMENT "Generate yio_lint_compile_commands.json with less source files"
  DEPENDS
    ${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json.diff
  COMMAND
    jq --arg pwd ${PROJECT_SOURCE_DIR} --arg rgx
    "/(src|test|_build/.*/test|third_party)/"
    "[ .[] | select(.file | ltrimstr($pwd) | test($rgx) | not) ]"
    ${CMAKE_CURRENT_BINARY_DIR}/compile_commands.json.diff >
    ${CMAKE_CURRENT_BINARY_DIR}/yio_lint_compile_commands.json.tmp
  COMMAND ! grep -F "\"file\": \"test/templated" ${CMAKE_CURRENT_BINARY_DIR}/yio_lint_compile_commands.json.tmp
  COMMAND ! grep -F "\"file\": \"test/reprocessed" ${CMAKE_CURRENT_BINARY_DIR}/yio_lint_compile_commands.json.tmp
  COMMAND ! grep -F "\"file\": \"src" ${CMAKE_CURRENT_BINARY_DIR}/yio_lint_compile_commands.json.tmp
  COMMAND ${CMAKE_COMMAND} -E copy_if_different
    ${CMAKE_CURRENT_BINARY_DIR}/yio_lint_compile_commands.json.tmp
    ${CMAKE_CURRENT_BINARY_DIR}/yio_lint_compile_commands.json
  VERBATIM
)
add_custom_target(yio_cppcheck
  COMMENT "Run cppcheck"
  #COMMAND mkdir -vp ${CMAKE_CURRENT_BINARY_DIR}/cppcheckbuilddir/
  COMMAND xargs -t -d "\\n" cppcheck < ${CMAKE_CURRENT_BINARY_DIR}/cppcheck.cfg > /dev/tty 2>&1
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/..
  DEPENDS
    ${CMAKE_CURRENT_SOURCE_DIR}/../scripts/cppcheck_misra.json
    ${CMAKE_CURRENT_BINARY_DIR}/misra_rules.txt
    ${CMAKE_CURRENT_BINARY_DIR}/cppcheck.cfg
    ${CMAKE_CURRENT_BINARY_DIR}/yio_lint_compile_commands.json
  VERBATIM
)
add_dependencies(yio_cppcheck yio)
