cmake_minimum_required(VERSION 3.12)

if(NOT "${PROJECT_NAME}" STREQUAL "yio")
	message(FATAL_ERROR "DO NOT INCLUDE THIS FILE BY ITS OWN: PROJECT_NAME=${PROJECT_NAME}")
endif()

include(CMakeDependentOption)
include(m4)
include(list_filter)
include(var_to_0_or_1)

function(log)
	get_filename_component(_log_list_filename ${CMAKE_CURRENT_LIST_FILE} NAME)
	message(STATUS "yio: ${_log_list_filename}: ${ARGN}")
endfunction()

###########################################################################################
# init

string(TOUPPER CMAKE_BUILD_TYPE build_type_upper)
# Source directory
get_filename_component(SRCDIR ${CMAKE_CURRENT_SOURCE_DIR} ABSOLUTE)
# Generated directory
get_filename_component(GENDIR ${CMAKE_CURRENT_BINARY_DIR}/gen ABSOLUTE)
# List of generated files by m4
set(gensrcs)

# Environment checks
include(environment_checks.cmake)
# Generated by environment_checks.cmake
list(APPEND gensrcs ${GENDIR}/yio/yio_config_gen.h)

# Generate version.h
include(version.cmake)
configure_file(${SRCDIR}/yio/yio_version.h.in ${GENDIR}/yio/yio_version.h)
list(APPEND gensrcs ${GENDIR}/yio/yio_version.h)

# User configuration
include(configuration.cmake)
# CPack
include(cpack.cmake)

###########################################################################################
# generate config.m4
configure_file(
	${SRCDIR}/m4/yio_config.m4.in
	${GENDIR}/m4/yio_config.m4
	@ONLY
)
list(APPEND gensrcs ${GENDIR}/m4/yio_config.m4)

# generate yio_config.h
configure_file(
	${SRCDIR}/yio/yio_config.h.in
	${GENDIR}/yio/yio_config.h
	@ONLY
)
list(APPEND gensrcs ${GENDIR}/yio/yio_config.h)

# generate error messages ####################
add_custom_command(
	OUTPUT
		${GENDIR}/yio/yio_error_messages.h
	DEPENDS
		${SRCDIR}/yio/yio_error.h
		${SRCDIR}/yio/yio_error_messages.cmake
	COMMAND ${CMAKE_COMMAND}
		-D OUTPUT=${GENDIR}/yio/yio_error_messages.h
		-D INPUT=${SRCDIR}/yio/yio_error.h
		-P ${CMAKE_CURRENT_SOURCE_DIR}/yio/yio_error_messages.cmake
	COMMENT "Generate yio/yio_error_messages.h file"
	VERBATIM
)
list(APPEND gensrcs ${GENDIR}/yio/yio_error_messages.h)

##############################################################################################
# Preprocess files with m4.

m4_add_options(
	--fatal-warnings
	--fatal-warnings
	# pass context
	-D m4_SRCDIR=${SRCDIR}
	-D m4_GENDIR=${GENDIR}
)
if(build_type_upper STREQUAL "DEBUG")
	m4_add_options(-D m4_NDEBUG=1)
endif()
m4_add_options(
	# Always load library.
	lib.m4
	# Load our configuration.
	${GENDIR}/m4/yio_config.m4
)
# Note: SRCDIR is included, so I can do `m4_include(yio/blabla)`.
m4_add_include_directories(${SRCDIR})
# Dependencies are generated for all m4 files in m4.cmake.
# We add here what we generate ourselves.
m4_add_file_dependencies(
	${CMAKE_CURRENT_SOURCE_DIR}/../m4/lib.m4 
	${GENDIR}/m4/yio_config.m4
)

file(GLOB_RECURSE m4srcs *.c *.h)
foreach(source IN LISTS m4srcs)
	file(RELATIVE_PATH sourcenice ${SRCDIR} ${source})
	set(output ${GENDIR}/${sourcenice})
	# dbg("m4_add_command ${output} ${source}")
	m4_add_command(${output} ${source})
	list(APPEND gensrcs ${output})
endforeach()

##############################################################################################
# Maintainance of GENDIR

# Generate all files target
add_custom_target(yio_gen
	DEPENDS ${gensrcs}
	COMMENT "yio: Generated source files"
)

# Remove files in GENDIR not in gensrcs
file(GLOB_RECURSE files ${GENDIR}/*.c ${GENDIR}/*.h ${GENDIR}/*.m4)
function(list_exclude result listin listexclude)
	set(tmp)
	foreach(i IN LISTS ${listin})
		list(FIND "${listexclude}" "${i}" index)
		if (${index} EQUAL -1)
			list(APPEND tmp "${i}")
		endif()
	endforeach()
	set(${result} "${tmp}" PARENT_SCOPE)
endfunction()
list_exclude(files_not_in_gensrcs files gensrcs)
if(files_not_in_gensrcs)
	foreach(i IN LISTS files_not_in_gensrcs)
		message(STATUS "yio: Removing: ${i}")
	endforeach()
	file(REMOVE ${files_not_in_gensrcs})
endif()

################################################################################################
# Installation configuration

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

# The directory where auto-generated installation files are placed
get_filename_component(installgen "${CMAKE_CURRENT_BINARY_DIR}/installgen" ABSOLUTE)
set(config_install_dir "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
set(project_config "${installgen}/${PROJECT_NAME}Config.cmake")
set(version_config "${installgen}/${PROJECT_NAME}ConfigVersion.cmake")
set(install_targets)
set(install_headers)

# yio_install_library(name headers...)
macro(yio_install_library name)
	list(APPEND install_targets ${name})
	list(APPEND install_headers ${ARGN})
	set(install_targets "${install_targets}" PARENT_SCOPE)
	set(install_headers "${install_headers}" PARENT_SCOPE)
endmacro()


function(yio_install_after_targets)
	write_basic_package_version_file(
	    "${version_config}"
	    COMPATIBILITY SameMajorVersion
	)
	# Uses TARGETS_EXPORT_NAME by yioConfig.cmake.in
	configure_package_config_file(
	    "${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in"
	    "${project_config}"
	    INSTALL_DESTINATION "${config_install_dir}"
	)
	install(
		TARGETS ${install_targets}
		EXPORT yioTargets
		OPTIONAL
		LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
		ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
		INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
	)
	list(SORT install_headers)
	list(REMOVE_DUPLICATES install_headers)
	foreach(h IN LISTS install_headers)
			get_filename_component(dir "${h}" DIRECTORY)
			install(
				FILES "${GENDIR}/${h}"
				DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${dir}/"
			)
	endforeach()
	install(
		FILES "${project_config}" "${version_config}"
		DESTINATION "${config_install_dir}"
	)
	install(
		EXPORT yioTargets
		DESTINATION "${config_install_dir}"
		NAMESPACE yio::
	)
endfunction()

################################################################################################
# Compile options

# @def yio_add_library(name sources)
# Adds the library with the name <name>
# that has the sources <sources>.
# Enables warnings if needed.
# Generates install target for the library.
function(yio_add_library name)
	set(argn ${ARGN})
	list(SORT argn)
	list(REMOVE_DUPLICATES argn)

	# Sources are relative to GENDIR.
	set(srcs)
	foreach(i IN LISTS argn)
		list(APPEND srcs "${GENDIR}/${i}")
	endforeach()
	
	# Add the library.
	add_library(${name} ${srcs})
	set_property(TARGET ${name} PROPERTY
		C_EXTENSIONS YES
		C_STANDARD 11
		C_STANDARD_REQUIRED NO
		$<$<NOT:$<CONFIG:DEBUG>>:INTERPROCEDURAL_OPTIMIZATION TRUE>	
		DEBUG_POSTFIX "d"
	)
	target_include_directories(${name} PUBLIC
		$<BUILD_INTERFACE:${GENDIR}>
	)
	
	# Add compiler options.
	if(CMAKE_C_COMPILER_ID STREQUAL "GNU" OR
			CMAKE_C_COMPILER_ID STREQUAL "Clang")
		target_compile_options(${name} PRIVATE
			$<$<CONFIG:Debug>:-ggdb3>
			-Wall
			-Wextra
			-Wwrite-strings
			-Wno-unused-function
			-Wno-unused-argument
			-Wno-unused-parameter
		)
	endif()
	if(CMAKE_C_COMPILER_ID STREQUAL "Clang")
		target_compile_options(${name} PRIVATE
			-Wno-varargs
		)
		target_compile_options(${name} PUBLIC
			-Wno-array-bounds
			-Wno-sizeof-array-decay
		)
	endif()
	
	add_dependencies(${name} yio_gen)
	target_link_libraries(${name} PUBLIC m)

	# Extract list of headers.
	set(headers "${argn}")
	list(FILTER headers INCLUDE REGEX "\\.h$")

	yio_install_library(${name} ${headers})
endfunction()

# Just like file(GLOB) but results in files 
# with paths relative to SRCDIR.
function(file_glob_relative_to_srcdir glob var)
	file(${glob} tmp ${ARGN})
	set(tmp2)
	foreach(i IN LISTS tmp)
		# message("${var} ${i}")
		file(RELATIVE_PATH j ${SRCDIR} ${i})
		list(APPEND tmp2 ${j})
	endforeach()
	set(${var} "${tmp2}" PARENT_SCOPE)
endfunction()

##################################################################################
# Add libraries
 
file_glob_relative_to_srcdir(GLOB auto_decimallib_srcs yio/decimallib/*.h yio/decimallib/*.c)
yio_add_library(yio_decimallib 
	${auto_decimallib_srcs}
	yio/yio_config.h
	yio/yio_version.h
	yio/yio_config_gen.h
)

file_glob_relative_to_srcdir(GLOB auto_generic_srcs yio/*.h yio/*.c)
file_glob_relative_to_srcdir(GLOB auto_yio_bits_srcs yio/bits/*.h yio/bits/*.c)
file_glob_relative_to_srcdir(GLOB_RECURSE auto_yio_srcs yio/yio/*.h yio/yio/*.c)
file_glob_relative_to_srcdir(GLOB_RECURSE auto_ywio_srcs yio/ywio/*.h yio/ywio/*.c)
yio_add_library(yio
	${auto_yio_bits_srcs}
	${auto_generic_srcs}
	yio/yio_config.h
	yio/yio_config_gen.h
	yio/yio_error_messages.h
	yio.h
	${auto_yio_srcs}
	ywio.h
	${auto_ywio_srcs}
)

if(UNISTRING_LIB)
	file_glob_relative_to_srcdir(GLOB_RECURSE auto_yuio_srcs yio/yuio/*.h yio/yuio/*.c)
	yio_add_library(yuio
		yuio.h
		${auto_yuio_srcs}
	)
	target_link_libraries(yuio PUBLIC yio ${UNISTRING_LIB})
endif()

##################################################################################

yio_install_after_targets()

add_custom_target(
	yio_uninstall 
	COMMAND sh -c "xargs rm -f -v < install_manifest.txt"
	WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
	VERBATIM
)
