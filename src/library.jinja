
{% macro j_seq(FROM, TO, FMT="{}", SEP="") %}
	{% if TO is undefined %}
		{% set TO = FROM %}
		{% set FROM = 1 %}
	{% endif %}
	{% set TO = TO|int %}
	{% set FROM = FROM|int %}
	{% set FMT = FMT|string %}
	{% set SEP = SEP|string %}
	{% if FROM < TO %}
		{% set LIST = range(FROM, TO + 1) %}
	{% else %}
		{% set LIST = range(TO, FROM + 1) | reverse %}
	{% endif %}
	{# #}
	{% for I in LIST %}
		{{- FMT.format(I) -}}
		{{- "" if loop.last else SEP -}}
	{%- endfor %}
{% endmacro %}

{% macro j_seqcomma(FROM, TO, FMT="{}") %}
	{{- j_seq(FROM, TO, FMT=FMT, SEP=",") -}}
{% endmacro %}

{% macro j_seqdashcomma(FROM, TO) %}
	{{- j_seq(FROM, TO, SEP=",", FMT="_{}") -}}
{% endmacro %}

{% macro j_APPLY_IN(STR, II) %}
	{% set v = {"v": STR } %}
	{% if II is string or II is integer %}
		{% set _ = v.update({"v": v.v | replace("$1", II|string) }) %}
	{% elif II is mapping %}
		{% for JJ in II %}
			{% set _ = v.update({"v": v.v | replace("$" + loop.index|string, II[JJ]) }) %}
		{% endfor %}
	{% elif II is iterable %}
		{% for JJ in II %}
			{% set _ = v.update({"v": v.v | replace("$" + loop.index|string, JJ) }) %}
		{% endfor %}
	{% else %}
		ERROR
	{% endif %}
	{{- v.v -}}
{% endmacro %}

{% macro j_APPLY() %}
	{{- j_APPLY_IN(caller(varargs) if caller.arguments|length else caller(), varargs) -}}
{% endmacro %}

{% macro j_FOREACHAPPLY(array) %}
	{% if array is undefined %}
		{{ fatal("array undefined: " + array|string) }}
	{% endif %}
	{% for I in array %}
		{% set STR =
			caller(I, loop) if caller.arguments|length == 2 else
			caller(I) if caller.arguments|length == 1 else
			caller() %}
		{{- j_APPLY_IN(STR, I) -}}
	{% endfor %}
{% endmacro %}

{% macro j_FUNC(replacefor) %}
	{{- replacefor | replace('{}', caller()) -}}
{% endmacro %}
